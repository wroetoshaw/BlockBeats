{"version":3,"file":"next-image-proxy.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fetch from 'isomorphic-unfetch'\nimport stream, { Stream } from 'stream'\nimport merge from 'lodash.merge'\nimport UserAgent from 'user-agents'\nimport { DeepPartial, Options } from './types'\n\nexport function withImageProxy(passedOptions?: DeepPartial<Options>) {\n  const defaultOptions: Options = {\n    whitelistedPatterns: [],\n    fallbackUrl: '',\n    messages: {\n      wrongFormat: 'Image url not provided or has wrong format',\n      notWhitelisted: 'Provided image url is not whitelisted',\n      imageFetchError: \"Couldn't fetch the image\",\n    },\n  }\n\n  const options: Options = merge(defaultOptions, passedOptions)\n\n  return async function (req: NextApiRequest, res: NextApiResponse) {\n    const imageUrl = req.query.imageUrl\n\n    if (!imageUrl || (imageUrl && Array.isArray(imageUrl))) {\n      res.status(400).send({ message: options.messages.wrongFormat })\n      return\n    }\n\n    const isAllowed = isUrlWhitelisted(imageUrl, options.whitelistedPatterns)\n\n    if (!isAllowed) {\n      res.status(422).send({ message: options.messages.notWhitelisted })\n      return\n    }\n\n    const imageBlob = await fetchImageBlob(imageUrl)\n\n    if (!imageBlob) {\n      handleFallback(res, options)\n      return\n    }\n\n    pipeImage(res, imageBlob, options)\n  }\n}\n\nfunction pipeImage(res: NextApiResponse, imageBlob: ReadableStream<Uint8Array>, options: Options) {\n  const passThrough = new Stream.PassThrough()\n\n  stream.pipeline(imageBlob as unknown as NodeJS.ReadableStream, passThrough, (err) => {\n    if (err) {\n      console.log(err)\n      handleFallback(res, options)\n      return\n    }\n  })\n  passThrough.pipe(res)\n}\n\nfunction handleFallback(res: NextApiResponse, options: Options) {\n  if (options.fallbackUrl.trim()) {\n    res.redirect(options.fallbackUrl)\n  } else {\n    res.status(422).send({ message: options.messages.imageFetchError })\n  }\n}\n\nasync function fetchImageBlob(url: string) {\n  return await fetch(url, {\n    headers: { 'user-agent': new UserAgent().toString() },\n  }).then((data) => data.body)\n}\n\nfunction isUrlWhitelisted(url: string, whitelistedPatterns: Options['whitelistedPatterns']) {\n  return whitelistedPatterns.some((singleHost) => {\n    return url.match(singleHost)\n  })\n}\n"],"names":["withImageProxy","passedOptions","options","merge","whitelistedPatterns","fallbackUrl","messages","wrongFormat","notWhitelisted","imageFetchError","req","res","imageUrl","query","Array","isArray","status","send","message","url","some","singleHost","match","imageBlob","async","fetch","headers","UserAgent","toString","then","data","body","fetchImageBlob","passThrough","Stream","PassThrough","stream","pipeline","err","console","log","handleFallback","pipe","pipeImage","trim","redirect"],"mappings":"qIAOgBA,EAAeC,GAC7B,MAUMC,EAAmBC,EAVO,CAC9BC,oBAAqB,GACrBC,YAAa,GACbC,SAAU,CACRC,YAAa,6CACbC,eAAgB,wCAChBC,gBAAiB,6BAI0BR,GAE/C,sBAAuBS,EAAqBC,GAC1C,MAAMC,EAAWF,EAAIG,MAAMD,SAE3B,IAAKA,GAAaA,GAAYE,MAAMC,QAAQH,GAE1C,YADAD,EAAIK,OAAO,KAAKC,KAAK,CAAEC,QAAShB,EAAQI,SAASC,cAiDvD,IAA0BY,EA3CtB,GA2CsBA,EA7CaP,GAAUV,EAAQE,oBA8C5BgB,KAAMC,GACxBF,EAAIG,MAAMD,IA3Cf,YADAV,EAAIK,OAAO,KAAKC,KAAK,CAAEC,QAAShB,EAAQI,SAASE,iBAInD,MAAMe,QAgCVC,eAA8BL,GAC5B,aAAaM,EAAMN,EAAK,CACtBO,QAAS,CAAE,cAAc,IAAIC,GAAYC,cACxCC,KAAMC,GAASA,EAAKC,MAnCGC,CAAepB,GAElCW,EAST,SAAmBZ,EAAsBY,EAAuCrB,GAC9E,MAAM+B,EAAc,IAAIC,EAAOC,YAE/BC,EAAOC,SAASd,EAA+CU,EAAcK,IAC3E,GAAIA,EAGF,OAFAC,QAAQC,IAAIF,QACZG,EAAe9B,EAAKT,KAIxB+B,EAAYS,KAAK/B,GAdfgC,CAAUhC,EAAKY,EAAWrB,GAJxBuC,EAAe9B,EAAKT,IAqB1B,SAASuC,EAAe9B,EAAsBT,GACxCA,EAAQG,YAAYuC,OACtBjC,EAAIkC,SAAS3C,EAAQG,aAErBM,EAAIK,OAAO,KAAKC,KAAK,CAAEC,QAAShB,EAAQI,SAASG"}